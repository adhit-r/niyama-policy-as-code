apiVersion: v1
kind: Secret
metadata:
  name: niyama-secrets
  namespace: niyama
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL25peWFtYTpuaXlhbWFAcG9zdGdyZXM6NTQzMi9uaXlhbWE= # base64 encoded "postgresql://niyama:niyama@postgres:5432/niyama"
  redis-url: cmVkaXM6Ly9yZWRpczozNjM5 # base64 encoded "redis://redis:6379"
  jwt-secret: dGVzdC1zZWNyZXQta2V5 # base64 encoded "test-secret-key"
  gemini-api-key: # Add your Gemini API key here (base64 encoded)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: niyama-config
  namespace: niyama
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  API_PORT: "8000"
  FRONTEND_URL: "https://niyama.dev"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_USER: "niyama"
  DB_NAME: "niyama"
  DB_SSL_MODE: "disable"
  DB_MAX_CONNS: "25"
  DB_MIN_CONNS: "5"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  JWT_ACCESS_EXPIRATION: "1h"
  JWT_REFRESH_EXPIRATION: "24h"
  AI_CACHE_TTL: "1h"
  AI_RETRY_ATTEMPTS: "3"
  AI_RETRY_DELAY: "1s"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: niyama-backend
  namespace: niyama
  labels:
    app: niyama-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: niyama-backend
  template:
    metadata:
      labels:
        app: niyama-backend
    spec:
      containers:
      - name: niyama-backend
        image: niyama/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: niyama-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: niyama-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: niyama-secrets
              key: jwt-secret
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: niyama-secrets
              key: gemini-api-key
        envFrom:
        - configMapRef:
            name: niyama-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: policies
          mountPath: /app/policies
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: policies
        configMap:
          name: niyama-policies
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001

---
apiVersion: v1
kind: Service
metadata:
  name: niyama-backend
  namespace: niyama
  labels:
    app: niyama-backend
spec:
  selector:
    app: niyama-backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: niyama-backend-hpa
  namespace: niyama
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: niyama-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
