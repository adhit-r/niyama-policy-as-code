version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: niyama-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/niyama?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - GIN_MODE=release
      - ENVIRONMENT=development
      - JWT_SECRET=dev-jwt-secret-key
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY:-pk_test_placeholder}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY:-sk_test_placeholder}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-placeholder}
      - OPA_URL=http://opa:8181
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opa:
        condition: service_healthy
    networks:
      - niyama-network
    volumes:
      - ./config/development:/app/config/development:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: niyama-frontend
    ports:
      - "3001:80"
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - VITE_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY:-pk_test_placeholder}
      - VITE_ENVIRONMENT=development
    depends_on:
      - backend
    networks:
      - niyama-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: niyama-postgres
    environment:
      - POSTGRES_DB=niyama
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - niyama-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d niyama"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: niyama-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - niyama-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # OPA (Open Policy Agent)
  opa:
    image: openpolicyagent/opa:0.58.0
    container_name: niyama-opa
    command: >
      run --server
      --set=decision_logs.console=true
      --set=status.console=true
      --set=bundles.niyama.resource=/policies
    ports:
      - "8181:8181"
    volumes:
      - ./backend/policies:/policies:ro
    networks:
      - niyama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: niyama-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - niyama-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: niyama-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - niyama-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  niyama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16