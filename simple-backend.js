const express = require('express');
const cors = require('cors');
const app = express();
const port = 8000;

app.use(cors());
app.use(express.json());

// Mock policy templates
const policyTemplates = [
  {
    id: '1',
    name: 'Container Security Policy',
    description: 'Ensures containers run securely',
    framework: 'SOC 2',
    language: 'Rego',
    content: `package policy

# Container Security Policy
# Framework: SOC 2

import rego.v1

# Deny if container runs as root
deny contains msg if {
    input.kind == "Pod"
    input.spec.securityContext.runAsUser == 0
    msg := "Container must not run as root user (runAsUser: 0)"
}

# Allow if runAsUser is set to non-root
allow if {
    input.kind == "Pod"
    input.spec.securityContext.runAsUser > 0
}`
  },
  {
    id: '2',
    name: 'Network Policy',
    description: 'Controls network access',
    framework: 'CIS',
    language: 'Rego',
    content: `package policy

# Network Policy
# Framework: CIS

import rego.v1

# Deny if no network policy is defined
deny contains msg if {
    input.kind == "Pod"
    not input.metadata.annotations["net.beta.kubernetes.io/network-policy"]
    msg := "Pod must have network policy defined"
}

# Allow if network policy exists
allow if {
    input.kind == "Pod"
    input.metadata.annotations["net.beta.kubernetes.io/network-policy"]
}`
  }
];

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'simple-backend',
    timestamp: new Date().toISOString()
  });
});

// Get policy templates
app.get('/api/v1/templates', (req, res) => {
  res.json(policyTemplates);
});

// Get specific template
app.get('/api/v1/templates/:id', (req, res) => {
  const template = policyTemplates.find(t => t.id === req.params.id);
  if (template) {
    res.json(template);
  } else {
    res.status(404).json({ error: 'Template not found' });
  }
});

// Generate policy (mock AI)
app.post('/api/v1/ai/generate-policy', (req, res) => {
  const { description, framework, language } = req.body;
  
  // Mock AI response
  const mockPolicy = `package policy

# ${description}
# Framework: ${framework}
# Language: ${language}

import rego.v1

# Mock policy generated for: ${description}
deny contains msg if {
    # Add your policy logic here
    # This is a mock policy generated by AI
    true
    msg := "Policy violation: ${description}"
}

# Example rule - customize based on your requirements
allow if {
    # Add your allow conditions here
    true
}`;

  res.json({
    policy: mockPolicy,
    description: description,
    framework: framework,
    language: language,
    source: 'mock-ai'
  });
});

// Optimize policy
app.post('/api/v1/ai/optimize-policy/:id', (req, res) => {
  const { policy } = req.body;
  
  // Mock optimization
  const optimizedPolicy = policy + '\n\n# Optimized by AI\n# Added performance improvements';
  
  res.json({
    policy_id: req.params.id,
    optimized_policy: optimizedPolicy
  });
});

app.listen(port, () => {
  console.log(`ðŸš€ Simple Backend running on http://localhost:${port}`);
  console.log(`ðŸ“š Health check: http://localhost:${port}/health`);
  console.log(`ðŸ“‹ Templates: http://localhost:${port}/api/v1/templates`);
});


